svar_set __i32_max  2147483647
svar_set __i32_min -2147483648
svar_set __empty    ""

sar_function __tmp_cvar_save    cond !?__tmp_i_cvar_$1=1 "svar_set __tmp_i_cvar_$1 1; svar_from_cvar __tmp_cvar_$1 $1; __tmp_cvar_save_exit $1"
sar_function __tmp_cvar_restore cond  ?__tmp_i_cvar_$1=1 "svar_set __tmp_i_cvar_$1 0; sar_expand $1 $$'$$__tmp_cvar_$1$$'"
sar_function __tmp_cvar_save_exit cond !?__tmp_x_cvar_$1=1 "svar_set __tmp_x_cvar_$1 1; sar_on_exit __tmp_cvar_restore $1"

// Svar capture without clogging console
sar_function svar_capture_quiet "__tmp_cvar_save sar_con_filter; __tmp_cvar_save sar_con_filter_default; sar_con_filter 1; sar_con_filter_default 0; svar_capture $'$1$' $+2; __tmp_cvar_restore sar_con_filter; __tmp_cvar_restore sar_con_filter_default"

// Returns 1 if $1 < $2, otherwise 0
// Updated from RainbowPhoenixx's version
// Return variable: less_than_ret
sar_function less_than "svar_set less_than_ret 0; svar_set __tmp_less_than $'$1$'; svar_fsub __tmp_less_than $'$2$'; svar_substr __tmp_less_than 0 1; cond ?__tmp_less_than=- svar_set less_than_ret 1"
// sar_function greater_than "less_than $'$2$' $'$1$'; sar_expand svar_set greater_than_ret $$less_than_ret"

// Returns 1 if $1 < 0, otherwise 0
// Updated from RainbowPhoenixx's version
// Return variable: neg_ret
// Dependencies: less_than
sar_function neg "less_than $'$1$' 0; sar_expand svar_set neg_ret $$less_than_ret"

// Get current session tick
// Updated from mlugg's version
// Return variable: gettick_ret
// Dependencies: svar_capture_quiet
sar_alias      gettick "svar_capture_quiet gettick_ret sar_session; sar_expand __gettick $gettick_ret"
sar_function __gettick "svar_set gettick_ret $4"

// Generates a random number such that 0 <= n < $1
// Updated from RainbowPhoenixx's version
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// Return variable: rng_ret / rand_ret / random_ret
// Dependencies: gettick, neg
svar_set __lcg_a 1103515
svar_set __lcg_b 12345
svar_set __lcg_m 42949672
sar_alias lcg_set_state svar_set __lcg_state
sar_alias lcg_init_seed "gettick; sar_expand lcg_set_state $gettick_ret"
sar_alias lcg_advance_state "svar_mul __lcg_state __lcg_a; svar_add __lcg_state __lcg_b; svar_mod __lcg_state __lcg_m; sar_expand neg $__lcg_state; cond ?neg_ret=1 svar_add __lcg_state __i32_max"
sar_on_config_exec lcg_init_seed // introduces some base randomness since config exec is based on network
sar_function __rng "lcg_advance_state; sar_expand svar_set $1_ret $$__lcg_state; svar_mod $1_ret $2"
sar_alias rng    __rng rng
sar_alias rand   __rng rand
sar_alias random __rnd random

// Linear Feedback Shift Register (LFSR)
// 16-bit LFSR with taps on bits 1 and 9.
// This is used in NES Tetris, but I hesitate to implement it.
// This will bring back the predictable first game unless I
// run stuff every tick even without SARtris enabled.
// http://en.wikipedia.org/wiki/Linear_feedback_shift_register
sar_alias lfsr_set_state svar_set __lfsr_state
sar_function lfsr_advance_state "svar_set __tmp $__lfsr_state; svar_div __tmp 512; svar_set __tmp1 $__lfsr_state; svar_div __tmp1 2; svar_add __tmp __tmp1; svar_mod __tmp 2; svar_mul __tmp 32768; svar_div __lfsr_state 2; svar_add __lfsr_state __tmp; svar_mod __lfsr_state 65536"

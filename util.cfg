
// If cond "$1" is true, do $2, otherwise do $3
sar_function __choose "cond $'$1$' $'$2$'; cond $'!($1)$' $'$3$'"

// 2^31-1
svar_set __i32_max 2147483647

sar_function __tmp_cvar_save    cond "!var:__tmp_init_cvar_$1=1" "svar_set __tmp_init_cvar_$1 1; svar_from_cvar __tmp_cvar_$1 $1"
sar_function __tmp_cvar_restore cond  "var:__tmp_init_cvar_$1=1" "svar_set __tmp_init_cvar_$1 0; sar_expand $1 $$'$$__tmp_cvar_$1$$'"

sar_alias __tmp_toast_save    "__tmp_cvar_save sar_toast_x; __tmp_cvar_save sar_toast_y; __tmp_cvar_save sar_toast_align; __tmp_cvar_save sar_toast_anchor; __tmp_cvar_save sar_toast_disable; __tmp_cvar_save sar_toast_width; __tmp_cvar_save sar_toast_background; __tmp_cvar_save sar_toast_compact; __tmp_cvar_save sar_toast_font"
sar_alias __tmp_toast_restore "__tmp_cvar_restore sar_toast_x; __tmp_cvar_restore sar_toast_y; __tmp_cvar_restore sar_toast_align; __tmp_cvar_restore sar_toast_anchor; __tmp_cvar_restore sar_toast_disable; __tmp_cvar_restore sar_toast_width; __tmp_cvar_restore sar_toast_background; __tmp_cvar_restore sar_toast_compact; __tmp_cvar_restore sar_toast_font"

// Svar capture without clogging console
sar_function svar_capture_quiet "__tmp_cvar_save sar_con_filter; __tmp_cvar_save sar_con_filter_default; sar_con_filter 1; sar_con_filter_default 0; svar_capture $'$1$' $'$2$'; __tmp_cvar_restore sar_con_filter; __tmp_cvar_restore sar_con_filter_default"

// Get game width and height
// Return variables: width, height
sar_alias getScreenDim "__tmp_toast_save; sar_toast_setpos top left; svar_from_cvar height sar_toast_y; svar_from_cvar width sar_toast_x; sar_toast_setpos bottom right; svar_from_cvar __tmp sar_toast_y; svar_add height __tmp; svar_from_cvar __tmp sar_toast_x; svar_add width __tmp; svar_from_cvar __tmp sar_toast_width; svar_add width __tmp; __tmp_toast_restore"
getScreenDim

// Registers a command to be ran every tick.
// Dependencies: less_than, while
sar_toast_tag_set_color sarontickwarning FF3333
sar_toast_tag_set_duration sarontickwarning forever
sar_function sar_on_tick "sar_function __sar_on_tick_$__sar_on_tick_len $'$1$'; svar_add __sar_on_tick_len 1"
sar_alias sar_on_tick_clear       svar_set __sar_on_tick_len 0
sar_alias sar_on_tick_remove_last svar_sub __sar_on_tick_len 1
sar_on_tick_clear
sar_function __on_tick "svar_set __on_tick_i 0; sar_expand less_than $$__on_tick_i $__sar_on_tick_len; while $'var:less_than_ret=1$' $'sar_expand __sar_on_tick_$$__on_tick_i; svar_add __on_tick_i 1; sar_expand less_than $$__on_tick_i $__sar_on_tick_len$'"
sar_function sar_on_tick_enable  cond "!var:__on_tick_init=1" sar_expand "sar_toast_create sarontickwarning $$'No runs! sar_on_tick enabled$$'; sar_alias _on_tick seq __on_tick _on_tick; _on_tick; svar_set __on_tick_init 1"
sar_function sar_on_tick_disable cond  "var:__on_tick_init=1" "sar_toast_tag_dismiss_all sarontickwarning; sar_alias _on_tick nop; svar_set __on_tick_init 0"

// Helper alias for saveload binds
sar_function saveload "save $1; load $1"

sar_function tempcheat "svar_from_cvar __tmp_cheats sv_cheats; sv_cheats 1; $1; sar_expand sv_cheats $$__tmp_cheats"

sar_function __set_if_empty         "sar_expand svar_set __tmp $'.$$$1$'; cond $'var:__tmp=.$' svar_set $1 $'$2$'"
sar_alias      or                    __set_if_empty
sar_function __set_if_empty_persist "__set_if_empty $1 $'$2$'; svar_persist $1"

// Returns 1 if $1 < 0, otherwise 0
// Updated from RainbowPhoenixx's version
// Return variable: neg_ret
sar_function neg "svar_set neg_ret 1; svar_set __tmp_neg $'$1$'; svar_add __tmp_neg 0; svar_append __tmp_neg __i32_max; svar_sub __tmp_neg __i32_max; cond $'var:__tmp_neg=0$' svar_set neg_ret 0"

// Returns 1 if $1 < $2, otherwise 0
// Updated from RainbowPhoenixx's version
// Return variable: less_than_ret
// Dependencies: neg
sar_function less_than "svar_set __tmp_less_than $'$1$'; svar_sub __tmp_less_than $'$2$'; sar_expand $'neg $$__tmp_less_than$'; sar_expand $'svar_set less_than_ret $$neg_ret$'"

// Get current session tick
// Updated from mlugg's version
// Return variable: gettick_ret
// Dependencies: svar_capture_quiet
sar_function gettick  "svar_capture_quiet gettick_ret sar_session; sar_expand __gettick $$gettick_ret"
sar_function __gettick "svar_set gettick_ret $4"

// Generates a random number such that 0 <= n < $1
// Updated from RainbowPhoenixx's version
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// Return variable: rand_ret
// Dependencies: gettick, neg
svar_set __lcg_a 1103515
svar_set __lcg_b 12345
svar_set __lcg_m 42949672
sar_alias lcg_set_state svar_set lcg_state
sar_function lcg_init_seed "gettick; sar_expand lcg_set_state $$gettick_ret"
sar_function lcg_advance_state "svar_mul lcg_state __lcg_a; svar_add lcg_state __lcg_b; svar_mod lcg_state __lcg_m; sar_expand neg $$lcg_state; cond $'var:neg_ret=1$' svar_add lcg_state __i32_max"
sar_on_config_exec lcg_init_seed // introduces some base randomness since config exec is based on network
sar_function __rng "lcg_advance_state; sar_expand svar_set $1_ret $$__lcg_state; svar_mod $1_ret $2"
sar_function rng    "__rng rng $1"
sar_alias    rand   "__rng rand $1"
sar_alias    random "__rnd random $1"

// Appends / prepends the contents of svar $2 to svar $1
sar_function svar_append  sar_expand svar_set "$1" "$$$1$$$2"
sar_function svar_prepend sar_expand svar_set "$1" "$$$2$$$1"

// Sets svar $1 to its absolute value
// Dependencies: neg
sar_function svar_abs "sar_expand neg $'$$$1$'; cond $'var:neg_ret=1$' sar_expand $'svar_set __tmp_abs $$'$$$1$$'; svar_mul __tmp_abs 2; svar_sub $$'$1$$' __tmp_abs$'"

// Map svar $1 from between $2 and $3 to between $4 and $5
sar_function svar_map "svar_sub $1 $2; svar_mul $1 1000; svar_set __tmp_map $3; svar_sub __tmp_map $2; svar_div $1 __tmp_map; svar_set __tmp_map $5; svar_sub __tmp_map $4; svar_mul $1 __tmp_map; svar_div $1 1000; svar_add $1 $4"

// Dependencies: less_than
sar_function svar_max "sar_expand less_than $'$$$1$' $'$2$'; cond $'var:less_than_ret=1$' svar_set $'$1$' $'$2$'" // Sets svar $1 to the larger  of itself and $2
sar_function svar_min "sar_expand less_than $'$$$1$' $'$2$'; cond $'var:less_than_ret=0$' svar_set $'$1$' $'$2$'" // Sets svar $1 to the smaller of itself and $2

// Clamps svar $1 between $2 and $3
// Dependencies: svar_max, svar_min
sar_function svar_clamp "svar_max $1 $2; svar_min $1 $3"

// Swaps svars $1 and $2
sar_function svar_swap sar_expand "svar_set $$'$1$$' $$'$$$2$$'; svar_set $$'$2$$' $$'$$$1$$'"

// Repeats command $1 $2 times
// Dependencies: neg
sar_function repeat "svar_set __tmp_repeat $'$2$'; svar_sub __tmp_repeat 1; sar_expand neg $$__tmp_repeat; cond $'var:neg_ret=0$' sar_expand $'$1; repeat $$'$1$$' $$__tmp_repeat$'"

// Repeats command $2 while cond $1 is true
svar_set while_limit 500
sar_function while   "svar_set while_i 0; _while $'$1$' $'$2$'"
sar_function _while  "svar_add while_i 1; cond $'$1$' __while $'$1$' $'$2$'"
sar_function __while "$2; cond $'var:while_i=$while_limit$' echo $'While recursion limit ($while_limit) reached$'; cond $'!var:while_i=$while_limit$' _while $'$1$' $'$2$'"

// Decimal to hex converter
// Return variable: hex_ret
// Dependencies: while, svar_prepend
svar_set hex_i0 0; svar_set hex_i1 1; svar_set hex_i2 2; svar_set hex_i3 3; svar_set hex_i4 4; svar_set hex_i5 5; svar_set hex_i6 6; svar_set hex_i7 7; svar_set hex_i8 8; svar_set hex_i9 9; svar_set hex_i10 A; svar_set hex_i11 B; svar_set hex_i12 C; svar_set hex_i13 D; svar_set hex_i14 E; svar_set hex_i15 F
sar_function hex  "svar_set hex_in $'$1$'; svar_add hex_in 0; svar_set hex_ret $'$'; cond $'var:hex_in=0$' svar_set hex_ret 0; while $'!var:hex_in=0$' _hex"
sar_function _hex "svar_set hex_mod $hex_in; svar_mod hex_mod 16; sar_expand svar_prepend hex_ret hex_i$$hex_mod; svar_div hex_in 16"

// RGB to hex converter
// Return variable: rgb_hex_ret
// Dependencies: less_than, hex, svar_append
sar_function rgb_hex  "svar_set rgb_hex_ret $'$'; __rgb_hex $'$1$'; __rgb_hex $'$2$'; __rgb_hex $'$3$'"
sar_function __rgb_hex "less_than $'$1$' 16; cond $'var:less_than_ret=1$' sar_expand svar_set rgb_hex_ret $'$rgb_hex_ret$-0$'; hex $'$1$'; svar_append rgb_hex_ret hex_ret"

// Hue to RGB converter
// Input: 0 - 360
// Return variable: hue_rgb_ret
// Dependencies: less_than, svar_append, svar_abs, svar_clamp, svar_max
sar_function hue_rgb   "_hue_rgb $'$1$' 120; sar_expand svar_set __hue_rgb_r $$__tmp_hue_rgb; _hue_rgb $'$1$' 240; sar_expand svar_set __hue_rgb_g $$__tmp_hue_rgb; _hue_rgb $'$1$' 360; sar_expand svar_set __hue_rgb_b $$__tmp_hue_rgb; _hue_rgb $'$1$' 0; sar_expand svar_max __hue_rgb_b $$__tmp_hue_rgb; __hue_rgb"
sar_function _hue_rgb  "svar_set __tmp_hue_rgb $1; svar_sub __tmp_hue_rgb $2; svar_abs __tmp_hue_rgb; svar_mul __tmp_hue_rgb -255; svar_div __tmp_hue_rgb 60; svar_add __tmp_hue_rgb 510; svar_clamp __tmp_hue_rgb 0 255"
sar_function __hue_rgb "svar_set hue_rgb_ret $'$__hue_rgb_r $__hue_rgb_g $__hue_rgb_b$'"

// Hue to hex converter
sar_function hue_hex "hue_rgb $'$1$'; sar_expand rgb_hex $$hue_rgb_ret; sar_expand svar_set hue_hex_ret $$rgb_hex_ret"

// LUT for hue_hex to optimise performance
sar_alias hue_hex_lut "svar_set __tmp 0; repeat __hue_hex_lut 360; sar_function hue_hex sar_expand svar_set hue_hex_ret $'$$hue_hex_$1$'; sar_alias hue_hex_lut nop"
sar_function __hue_hex_lut "hue_hex $__tmp; sar_expand svar_set hue_hex_$__tmp $'$$hue_hex_ret$'; svar_add __tmp 1"
hue_hex_lut

// setvel <x> <y> <z> - sets velocity. Use - to keep velocity on axis. Unspecified arguments are 0.
sar_function setvel "__setvel_h1 x $1; __setvel_h1 y $2; __setvel_h1 z $3; __setvel_h2"
sar_function __setvel_h1 "svar_set __tmp $'x$2$'; svar_set __setvel_$1 $'$2$'; cond $'var:__tmp=x-$' svar_set __setvel_$1 $'GetPlayer().GetVelocity().$1$'; cond $'var:__tmp=x$' svar_set __setvel_$1 0"
sar_function __setvel_h2 script "GetPlayer().SetVelocity(Vector($__setvel_x, $__setvel_y, $__setvel_z))"

// printargs [...] - prints its given args
sar_function printargs "echo $'$$1: $1$'; echo $'$$2: $2$'; echo $'$$3: $3$'; echo $'$$4: $4$'; echo $'$$5: $5$'; echo $'$$6: $6$'; echo $'$$7: $7$'; echo $'$$8: $8$'; echo $'$$9: $9$'"

// ARRAY LIBRARY
sar_function Array.init "svar_set $'__$1_len$' 0; sar_function $'$1.push$' $'svar_set $$'__$1[$$__$1_len]$$' $$'$$1$$'; svar_add $$'__$1_len$$' 1$'"
